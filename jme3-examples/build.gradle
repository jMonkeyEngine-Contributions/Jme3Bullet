//apply plugin:'application'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'jme3test.TestChooser'
}

task run(dependsOn: 'build', type:JavaExec) {
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath

    if (System.properties['java.util.logging.config.file'] != null) {
        systemProperty "java.util.logging.config.file", System.properties['java.util.logging.config.file']
    }

    if( assertions  == "true" ){
        enableAssertions = true;
    }
}

dependencies {
    compile 'org.jmonkeyengine:jme3-core:3.3.2-stable'
    compile 'org.jmonkeyengine:jme3-desktop:3.3.2-stable'
    compile 'org.jmonkeyengine:jme3-effects:3.3.2-stable'

    // EITHER use jme3-bullet + jme3-bullet-native OR ELSE jme3-jbullet
    compile project(':jme3-bullet')
    compile project(':jme3-bullet-native')
//    compile project(':jme3-jbullet')

    compile 'org.jmonkeyengine:jme3-jogg:3.3.2-stable'
    compile 'org.jmonkeyengine:jme3-lwjgl:3.3.2-stable'
//    compile 'org.jmonkeyengine:jme3-lwjgl3:3.3.2-stable'
    compile 'org.jmonkeyengine:jme3-networking:3.3.2-stable'
    compile 'org.jmonkeyengine:jme3-niftygui:3.3.2-stable'
    compile 'org.jmonkeyengine:jme3-plugins:3.3.2-stable'
    compile 'org.jmonkeyengine:jme3-terrain:3.3.2-stable'
    compile 'org.jmonkeyengine:jme3-testdata:3.3.2-stable'
}

jar.doFirst{
    manifest {
        attributes('Manifest-Version'       : '1.0',
//                'Created-By'             : vendor,
//                'Specification-Title'    : appName,
//                'Specification-Version'  : jmeVersion,
//                'Specification-Vendor'   : "jMonkeyEngine",
//                'Implementation-Title'   : appName,
//                'Implementation-Version' : version,
//                'Implementation-Vendor'  : vendor,
                'Main-Class'             : getProperty('mainClass'),
                // Add dependencies to manifest, remove version
                'Class-Path'             : configurations.compile.resolvedConfiguration.resolvedArtifacts.collect {
                                                        'lib/' +
                                                        it.name +
                                                        (it.classifier != null ? '-' + it.classifier : '') +
                                                        '.' + it.extension }.join(' ')
        )
    }
}

task dist (dependsOn: ['build', ':jme3-bullet:jar', ':jme3-android:jar', \
                       ':jme3-android-native:jar', ':jme3-bullet-native-android:jar', \
                       ':jme3-bullet-native:jar']) {
    doLast {
        // Copy all dependencies to ../dist/lib, remove versions from jar files
        configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from artifact.file
                into '../dist/lib'
                if(artifact.classifier != null){
                    rename { "${artifact.name}-${artifact.classifier}.${artifact.extension}" }
                } else{
                    rename { "${artifact.name}.${artifact.extension}" }
                }
            }
        }
        copy {
            from jar.archivePath
            into '../dist'
            rename { "jMonkeyEngine3.jar" }
        }

        // Copy bullet packages, remove version
        copy {
            from project(':jme3-bullet').jar.archivePath
            into '../dist/opt/native-bullet'
            rename {project(':jme3-bullet').name+".jar"}
        }
        copy {
            from project(':jme3-bullet-native').jar.archivePath
            into '../dist/opt/native-bullet'
            rename {project(':jme3-bullet-native').name+".jar"}
        }

        // Copy android packages, remove version
        copy {
            from project(':jme3-android').jar.archivePath
            into '../dist/opt/android'
            rename {project(':jme3-android').name+".jar"}
        }
        copy {
            from project(':jme3-android-native').jar.archivePath
            into '../dist/opt/android'
            rename {project(':jme3-android-native').name+".jar"}
        }
        copy {
            from project(':jme3-bullet-native-android').jar.archivePath
            into '../dist/opt/native-bullet'
            rename {project(':jme3-bullet-native-android').name+".jar"}
        }
    }
}
